1. Daten (Parkplatz-Zustand) einlesen
    1. Datei öffnen
    2. Datei zeilenweise einlesen und Zeilen entsprechend behandeln
        1. Erste Zeile: Anzahl der richtig parkenden Autos
            1. Anzahl der normalen Parkplätze berechnen
        2. Restliche Zeilen: Autos und an welchem Parkplatz "indize" sie beginnen
            Erstmal zwischenspeichern (Eventuell in einem Dictionary?)
    3. Eingelesende Daten in einer sinnvollen Datenstruktur speichern / repräsentiere
        1. Einfacheres Array
2. Ausfahrt berechnen
    Der Reihe nach von A - n (also für jeden Parkplatz von rechts nach links nacheinander, um die
    Ausgabe leichter formatieren zu können
    1. Triviale Fälle behandeln - Autos die einfach so ausparken können
        1. Wenn None, dann ...
    2. Fälle behandeln, in denen ein Auto zu einer Seite mindestens genug platz hat
        1. Überprüfen ob auf einer oder beiden Seiten genug platz ist
            Wenn Ja fahre fort mit 2.2.2
            Wenn Nein fahre fort mit 2.3.1
        2. Wenn möglich die Variante wählen bei der das Auto nur einen Platz verschoben werden muss
    3. Fälle bei denen mehrere Autos verschoben werden müssen
        1. Iterativ auf beiden Seiten probieren weitere Autos zu verschieben, bis genug platz ist
        2. Die Variante wählen, bei der weniger verschoben werden muss
3. Ergebnis ausgeben
    1. Dabei auf das richtige Format achten


Reflexion:
Durch das Löschen hat sich natürlich einiges verändert, aber ich hab versucht die Strutktur so zu halten
wie sie beim ersten mal war.

Dahingehend auch meine Learnings die ich beim ersten mal hatte:
Mit Fortschreitendem Programmieren habe ich mich immer mehr von der TDD methode und der
Idee der schrittweisen Verfeinerung entfernt, weil ich immer mehr in das mir bekannte
"trial und error" verfallen bin.
Das könnte auch daran liegen, dass ich mit python nicht so vertraut bin und noch mehr ausprobieren
musste.

Allerdings habe ich gemerkt, dass das grundsätzliche anfängliche Überlegen für die schrittweise
Verfeinerung mir viel geholfen hat und ich möchte mich bei nächsten Projekten mehr daran versuchen

Das Programmieren nach TDD, auch wenn ich es nicht optimal gemacht habe, war auch eine große
Hilfe, weil ich mir über schon getestete Funktionen keine Sorgen mehr gmeacht habe.
Gerade bei komplexeren muss ich hier aber auch strikter sein und alle fälle/ zweige
am besten einzelnd abtesten.
Auch hier werde ich mich weiter dran versuchen